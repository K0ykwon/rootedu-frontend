import { createClient } from 'redis'
import * as dotenv from 'dotenv'

// Load environment variables
dotenv.config({ path: '.env.local' })

// Initialize Redis client
const redis = createClient({
  url: process.env.REDIS_URL
})

const addProduct = async () => {
  const newProduct = {
    id: 'p8',
    influencerSlug: 'yaktoon',
    title: 'ÎÇ¥ ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä Ï†êÍ≤ÄÌïòÍ∏∞',
    subtitle: 'Îπ†Î•¥Í≥† Ï†ïÌôïÌïú ÏÉùÍ∏∞Î∂Ä ÏßÑÎã® ÏÑúÎπÑÏä§',
    price: 49000,
    level: 'beginner',
    thumbnail: '/thumbs/p8.svg',
    summary: '20Î∂Ñ 1:1 ÏÉÅÎã¥ÏúºÎ°ú ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä ÌòÑÌô© ÏßÑÎã® + Í∞úÏÑ† Ìè¨Ïù∏Ìä∏ Ï†úÍ≥µ',
    description: {
      overview: 'ÌòÑÏû¨ ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä ÏÉÅÌÉúÎ•º Îπ†Î•¥Í≤å ÏßÑÎã®ÌïòÍ≥† ÌïµÏã¨ Í∞úÏÑ†Ï†êÏùÑ Ï†úÏãúÌïòÎäî ÏûÖÎ¨∏Ìòï ÏÑúÎπÑÏä§ÏûÖÎãàÎã§. Î≥µÏû°Ìïú Ïû•Í∏∞ Ïª®ÏÑ§ÌåÖ Ï†ÑÏóê ÌòÑÏû¨ ÏÉÅÌô©ÏùÑ ÌååÏïÖÌïòÍ≥† Ïã∂ÏùÄ ÌïôÏÉùÎì§ÏùÑ ÏúÑÌïú ÎßûÏ∂§ ÏÑúÎπÑÏä§Î°ú, ÏßßÏùÄ ÏãúÍ∞Ñ ÎÇ¥Ïóê Ï†ÑÎ¨∏Í∞ÄÏùò Ï†ïÌôïÌïú ÏßÑÎã®ÏùÑ Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§.',
      
      process: [
        {
          step: '1Îã®Í≥Ñ - ÏÉùÍ∏∞Î∂Ä ÌòÑÌô© Î∂ÑÏÑù',
          content: [
            'ÌòÑÏû¨ ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä Ï†ÑÏ≤¥ Íµ¨Ï°∞ ÌååÏïÖ',
            'Í∞Å Í≥ºÎ™©Î≥Ñ ÏÑ∏Ìäπ ÌòÑÌô© Ï†êÍ≤Ä',
            'ÌôúÎèô Í∏∞Î°ùÏùò ÏùºÍ¥ÄÏÑ± ÌôïÏù∏',
            'ÎàÑÎùΩÎêòÍ±∞ÎÇò Î∂ÄÏ°±Ìïú ÏòÅÏó≠ ÏãùÎ≥Ñ'
          ]
        },
        {
          step: '2Îã®Í≥Ñ - Î¨∏Ï†úÏ†ê ÏßÑÎã®',
          content: [
            'Ïä§ÌÜ†Î¶¨ Ïó∞Í≤∞ÏÑ± Î∂ÄÏ°± Íµ¨Í∞Ñ ÌååÏïÖ',
            'ÌèâÍ∞ÄÏûê Í¥ÄÏ†êÏóêÏÑúÏùò ÏïΩÏ†ê Î∂ÑÏÑù',
            'Í≤ΩÏüÅÎ†• Ï†ÄÌïò ÏöîÏÜå ÏãùÎ≥Ñ',
            'Í∞úÏÑ† Ïö∞ÏÑ†ÏàúÏúÑ ÏÑ§Ï†ï'
          ]
        },
        {
          step: '3Îã®Í≥Ñ - Í∞úÏÑ† Î∞©Ìñ• Ï†úÏãú',
          content: [
            'Îã®Í∏∞ Í∞úÏÑ† Í∞ÄÎä•Ìïú ÏòÅÏó≠ ÏïàÎÇ¥',
            'Ïû•Í∏∞ Ï†ÑÎûµÏù¥ ÌïÑÏöîÌïú Î∂ÄÎ∂Ñ Íµ¨Î∂Ñ',
            'Íµ¨Ï≤¥Ï†ÅÏù∏ Ïï°ÏÖò ÏïÑÏù¥ÌÖú Ï†úÏãú',
            'Îã§Ïùå Îã®Í≥Ñ Î°úÎìúÎßµ ÏïàÎÇ¥'
          ]
        },
        {
          step: '4Îã®Í≥Ñ - ÌõÑÏÜç ÏÉÅÎã¥ Ïó∞Í≤∞',
          content: [
            'Ïã¨Ìôî Ïª®ÏÑ§ÌåÖ ÌïÑÏöîÏÑ± ÌåêÎã®',
            'Í∞úÎ≥Ñ ÎßûÏ∂§ ÏÜîÎ£®ÏÖò Î∞©Ìñ• Ï†úÏãú',
            'Ï∂îÍ∞Ä ÏÑúÎπÑÏä§ Ïó∞Í≤∞ Î∞è ÏïàÎÇ¥',
            'ÏßÄÏÜçÏ†ÅÏù∏ Í¥ÄÎ¶¨ Î∞©Ïïà ÎÖºÏùò'
          ]
        }
      ],
      
      deliverables: [
        {
          name: 'ÏÉùÍ∏∞Î∂Ä ÏßÑÎã® Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏',
          description: 'ÌòÑÏû¨ ÏÉùÌôúÍ∏∞Î°ùÎ∂ÄÏùò Í∞ïÏ†êÍ≥º ÏïΩÏ†êÏùÑ ÌïúÎààÏóê Î≥º Ïàò ÏûàÎäî Ï≤¥Í≥ÑÏ†ÅÏù∏ Î∂ÑÏÑùÌëú'
        },
        {
          name: 'ÌïµÏã¨ Í∞úÏÑ†Ï†ê ÏöîÏïΩÏÑú',
          description: 'Ïö∞ÏÑ†Ï†ÅÏúºÎ°ú Í∞úÏÑ†Ìï¥Ïïº Ìï† 3-5Í∞ÄÏßÄ ÌïµÏã¨ Ìè¨Ïù∏Ìä∏ÏôÄ Íµ¨Ï≤¥Ï†ÅÏù∏ Í∞úÏÑ† Î∞©Ïïà'
        },
        {
          name: 'Ï∂îÏ≤ú Ïï°ÏÖò ÌîåÎûú',
          description: 'Îã®Í∏∞(1Í∞úÏõî), Ï§ëÍ∏∞(ÌïôÍ∏∞), Ïû•Í∏∞(ÌïôÎÖÑ) Í¥ÄÏ†êÏùò Ïã§Ìñâ Í∞ÄÎä•Ìïú Ïï°ÏÖò ÏïÑÏù¥ÌÖú'
        }
      ],
      
      expectedOutcomes: [
        'ÌòÑÏû¨ ÏÉùÍ∏∞Î∂Ä ÏúÑÏπò Ï†ïÌôïÌïú ÌååÏïÖ',
        'Í∞úÏÑ† Ïö∞ÏÑ†ÏàúÏúÑ Î™ÖÌôïÌôî',
        'Ïã§Ìñâ Í∞ÄÎä•Ìïú Íµ¨Ï≤¥Ï†Å Î∞©Ìñ• Ï†úÏãú',
        'Ï∂îÍ∞Ä Ïª®ÏÑ§ÌåÖ ÌïÑÏöîÏÑ± ÌåêÎã® ÏßÄÏõê'
      ],
      
      idealFor: [
        'ÏÉùÍ∏∞Î∂Ä ÌòÑÏû¨ ÏÉÅÌÉúÍ∞Ä Í∂ÅÍ∏àÌïú ÌïôÏÉù',
        'Í∞úÏÑ† Î∞©Ìñ•ÏùÑ Î™®Î•¥Í≤†Îäî ÌïôÏÉù',
        'Î≥∏Í≤©Ï†ÅÏù∏ Ïª®ÏÑ§ÌåÖ Ï†Ñ ÌòÑÌô© ÌååÏïÖÏù¥ ÌïÑÏöîÌïú ÌïôÏÉù',
        'ÏãúÍ∞ÑÍ≥º ÎπÑÏö©ÏùÑ Ï†àÏïΩÌïòÎ©¥ÏÑú Ï†ÑÎ¨∏Í∞Ä Ï°∞Ïñ∏ÏùÑ Î∞õÍ≥† Ïã∂ÏùÄ ÌïôÏÉù'
      ],
      
      differentiator: {
        vs_full_consulting: 'Ïû•Í∏∞ Ïª®ÏÑ§ÌåÖ ÎåÄÎπÑ Îπ†Î•¥Í≥† Ï†ÄÎ†¥Ìïú ÏßÑÎã® Ï§ëÏã¨ ÏÑúÎπÑÏä§',
        vs_self_check: 'Ï†ÑÎ¨∏Í∞ÄÏùò Í∞ùÍ¥ÄÏ†Å ÏãúÍ∞ÅÏúºÎ°ú ÎÜìÏπòÍ∏∞ Ïâ¨Ïö¥ Î∂ÄÎ∂ÑÍπåÏßÄ Ï≤¥ÌÅ¨',
        unique_value: '20Î∂Ñ ÏïàÏóê ÌïµÏã¨ Ìè¨Ïù∏Ìä∏Îßå Ï†ïÌôïÌûà ÏßöÏñ¥Ï£ºÎäî Ìö®Ïú®ÏÑ±'
      }
    },
    features: [
      '20Î∂Ñ 1:1 Ï†ÑÎ¨∏Í∞Ä ÏÉÅÎã¥',
      'ÏÉùÍ∏∞Î∂Ä Ï†ÑÏ≤¥ Íµ¨Ï°∞ ÏßÑÎã®',
      'Ïö∞ÏÑ†ÏàúÏúÑ Í∏∞Î∞ò Í∞úÏÑ†Ï†ê Ï†úÏãú',
      'Ïã§Ìñâ Í∞ÄÎä•Ìïú Ïï°ÏÖò ÌîåÎûú Ï†úÍ≥µ',
      'ÌõÑÏÜç ÏÑúÎπÑÏä§ Ïó∞Í≤∞ ÏïàÎÇ¥'
    ],
    duration: '20Î∂Ñ',
    format: 'Ïò®ÎùºÏù∏ 1:1 ÏÉÅÎã¥',
    createdAt: Date.now(),
    updatedAt: Date.now()
  }

  try {
    console.log('Connecting to Redis at:', process.env.REDIS_URL)
    
    // Connect to Redis
    await redis.connect()
    console.log('‚úÖ Connected to Redis successfully')
    
    // Check if product already exists
    const existingProduct = await redis.hGetAll(`product:${newProduct.id}`);
    if (Object.keys(existingProduct).length > 0) {
      console.log(`‚ö†Ô∏è Product ${newProduct.id} already exists. Updating...`)
    } else {
      console.log(`‚ú® Creating new product ${newProduct.id}...`)
    }
    
    // Add the product to Redis - using the correct key format
    const productKey = `product:${newProduct.id}`;
    const productData: Record<string, string> = {
      id: newProduct.id,
      influencerSlug: newProduct.influencerSlug,
      title: newProduct.title,
      subtitle: newProduct.subtitle || '',
      price: newProduct.price.toString(),
      level: newProduct.level,
      thumbnail: newProduct.thumbnail,
      summary: newProduct.summary,
      description: JSON.stringify(newProduct.description),
      features: JSON.stringify(newProduct.features),
      duration: newProduct.duration || '',
      format: newProduct.format || '',
      createdAt: newProduct.createdAt.toString(),
      updatedAt: newProduct.updatedAt.toString()
    };
    
    await redis.hSet(productKey, productData);
    console.log(`‚úÖ Added/Updated product at key: ${productKey}`)
    
    // Add to influencer's product set
    await redis.sAdd(`influencer:${newProduct.influencerSlug}:products`, newProduct.id);
    console.log(`‚úÖ Added to influencer:${newProduct.influencerSlug}:products set`)
    
    // Verify the product was added
    const verifyProduct = await redis.hGetAll(productKey);
    console.log('‚úÖ Product verification:', {
      id: verifyProduct.id,
      title: verifyProduct.title,
      price: verifyProduct.price,
      influencerSlug: verifyProduct.influencerSlug
    });
    
    // Verify it's in the influencer's products set
    const influencerProducts = await redis.sMembers(`influencer:${newProduct.influencerSlug}:products`);
    console.log(`‚úÖ Yaktoon products count: ${influencerProducts.length}`)
    console.log('‚úÖ All yaktoon products:', influencerProducts)
    
    console.log('üéâ Product "ÎÇ¥ ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä Ï†êÍ≤ÄÌïòÍ∏∞" added successfully!')
    
  } catch (error) {
    console.error('‚ùå Error adding product:', error)
    process.exit(1)
  } finally {
    await redis.disconnect()
  }
}

// Run the script
addProduct()
  .then(() => {
    console.log('‚úÖ Script completed successfully!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('‚ùå Script failed:', error)
    process.exit(1)
  })